using System;
using System.Collections.Generic;
using Server;
using Server.Items;
using Server.Mobiles;
using Server.Targeting;
using Server.Gumps;
using Server.Network;

namespace Server.Custom
{
    public class TradeRouteChart : Item, IIdentifiable
    {
        private int m_Level;
        private Point3D m_NextLocation;
        private Map m_NextFacet;
        private string m_RequiredCommodity;
        private int m_RequiredAmount;
        private bool m_Identified;

        [CommandProperty(AccessLevel.GameMaster)]
        public int Level { get { return m_Level; } set { m_Level = value; } }

        [CommandProperty(AccessLevel.GameMaster)]
        public Point3D NextLocation { get { return m_NextLocation; } set { m_NextLocation = value; } }

        [CommandProperty(AccessLevel.GameMaster)]
        public Map NextFacet { get { return m_NextFacet; } set { m_NextFacet = value; } }

        [CommandProperty(AccessLevel.GameMaster)]
        public string RequiredCommodity { get { return m_RequiredCommodity; } set { m_RequiredCommodity = value; } }

        [CommandProperty(AccessLevel.GameMaster)]
        public int RequiredAmount { get { return m_RequiredAmount; } set { m_RequiredAmount = value; } }

        [CommandProperty(AccessLevel.GameMaster)]
        public bool Identified { get { return m_Identified; } set { m_Identified = value; } }

        [Constructable]
        public TradeRouteChart(int level) : base(0x14ED)
        {
            m_Level = level;
            Name = "Trade Route Chart";
            LootType = LootType.Blessed;
            Visible = true;
            m_Identified = false;
        }

        public TradeRouteChart(Serial serial) : base(serial) { }

        public override void OnDoubleClick(Mobile from)
        {
            if (!IsChildOf(from.Backpack))
            {
                from.SendLocalizedMessage(1042001); // That must be in your pack for you to use it.
                return;
            }

            if (m_Identified)
            {
                from.SendMessage($"This trade route requires {m_RequiredAmount} {m_RequiredCommodity}. The next point is located at {m_NextLocation} on {m_NextFacet}.");
            }
            else
            {
                from.SendMessage("You must identify this clue using the Item Identification skill before you can examine it.");
            }
        }

        public bool CheckIdentify(Mobile m)
        {
            if (m_Identified)
                return false;

            double identifySkill = m.Skills[SkillName.ItemID].Value;
            double difficulty = 80 + (m_Level * 5); // Adjust this formula as needed

            return (identifySkill >= difficulty);
        }

        public void OnIdentified(Mobile m)
        {
            m_Identified = true;
            m.SendLocalizedMessage(500819); // You have successfully identified the item.
            m.SendMessage("You have identified a Trade Route Clue!");
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version

            writer.Write(m_Level);
            writer.Write(m_NextLocation);
            writer.Write(m_NextFacet);
            writer.Write(m_RequiredCommodity);
            writer.Write(m_RequiredAmount);
            writer.Write(m_Identified);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();

            m_Level = reader.ReadInt();
            m_NextLocation = reader.ReadPoint3D();
            m_NextFacet = reader.ReadMap();
            m_RequiredCommodity = reader.ReadString();
            m_RequiredAmount = reader.ReadInt();
            m_Identified = reader.ReadBool();
        }
    }

    public class TradeRouteMerchant : BaseVendor
    {
        private List<SBInfo> m_SBInfos = new List<SBInfo>();
        protected override List<SBInfo> SBInfos { get { return m_SBInfos; } }

        [Constructable]
        public TradeRouteMerchant() : base("the Trade Route Merchant")
        {
        }

        public TradeRouteMerchant(Serial serial) : base(serial)
        {
        }

        public override void InitSBInfo()
        {
            m_SBInfos.Add(new SBTradeRouteMerchant());
        }

        public override void OnItemGiven(Mobile from, Item item)
        {
            base.OnItemGiven(from, item);

            if (item is TradeRouteChart clue && clue.Identified)
            {
                if (CheckTradeGoods(from, clue.RequiredCommodity, clue.RequiredAmount))
                {
                    Say("Excellent! You've completed the trade route. Here's your reward!");
                    Delete();
                    SpawnRewardChest(from);
                }
                else
                {
                    Say($"I'm sorry, but I need {clue.RequiredAmount} {clue.RequiredCommodity} to complete this trade.");
                }
            }
        }

        private bool CheckTradeGoods(Mobile from, string commodity, int amount)
        {
            Type commodityType = ScriptCompiler.FindTypeByName(commodity);
            if (commodityType == null)
                return false;

            int count = 0;
            foreach (Item item in from.Backpack.Items)
            {
                if (item.GetType() == commodityType)
                {
                    count += item.Amount;
                    if (count >= amount)
                    {
                        ConsumeGoods(from, commodityType, amount);
                        return true;
                    }
                }
            }
            return false;
        }

        private void ConsumeGoods(Mobile from, Type commodityType, int amount)
        {
            int remaining = amount;
            List<Item> toDelete = new List<Item>();

            foreach (Item item in from.Backpack.Items)
            {
                if (item.GetType() == commodityType)
                {
                    if (item.Amount <= remaining)
                    {
                        remaining -= item.Amount;
                        toDelete.Add(item);
                    }
                    else
                    {
                        item.Amount -= remaining;
                        remaining = 0;
                    }

                    if (remaining == 0)
                        break;
                }
            }

            foreach (Item item in toDelete)
                item.Delete();
        }

        private void SpawnRewardChest(Mobile from)
        {
            TradeRouteRewardChest chest = new TradeRouteRewardChest();
            chest.MoveToWorld(Location, Map);
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }

    public class TradeRouteRewardChest : LockableContainer
    {
        [Constructable]
        public TradeRouteRewardChest() : base(0xE41)
        {
            Name = "Trade Route Reward Chest";
            Movable = false;
            LockLevel = 100;
            MaxLockLevel = 100;
            RequiredSkill = 100;
            Locked = true;

            TrapType = TrapType.ExplosionTrap;
            TrapPower = 100;

            GenerateLoot();
        }

        public TradeRouteRewardChest(Serial serial) : base(serial)
        {
        }

        private void GenerateLoot()
        {
            // Add loot generation logic here
            // Example:
            DropItem(new Gold(Utility.RandomMinMax(1000, 5000)));
            // Add more valuable or rare items as needed
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }

    public class TradeRouteSystem
    {
        public static void StartTradeRoute(Mobile from)
        {
            int maxClues = CalculateMaxClues(from);
            List<Point3D> locations = new List<Point3D>();
            List<Map> facets = new List<Map>();
            GetRandomLocations(maxClues + 1, locations, facets); // +1 for final location

            TradeRouteChart firstClue = new TradeRouteChart(1);
            firstClue.NextLocation = locations[1];
            firstClue.NextFacet = facets[1];
            firstClue.RequiredCommodity = GetRandomCommodity();
            firstClue.RequiredAmount = CalculateRequiredAmount(1);
            firstClue.Identified = true; // First clue is always identified

            if (from.AddToBackpack(firstClue))
            {
                from.SendMessage("You've received your first trade route chart. Identify and examine it to start your journey.");
            }
            else
            {
                firstClue.Delete();
                from.SendMessage("You find a trade route clue, but have no room in your backpack to keep it.");
            }

            for (int i = 1; i < maxClues; i++)
            {
                TradeRouteChart clue = new TradeRouteChart(i + 1);
                clue.NextLocation = i < maxClues - 1 ? locations[i + 1] : locations[maxClues];
                clue.NextFacet = i < maxClues - 1 ? facets[i + 1] : facets[maxClues];
                clue.RequiredCommodity = GetRandomCommodity();
                clue.RequiredAmount = CalculateRequiredAmount(i + 1);
                clue.MoveToWorld(locations[i], facets[i]);
            }

            // Create and place the final merchant
            TradeRouteMerchant merchant = new TradeRouteMerchant();
            merchant.MoveToWorld(locations[maxClues], facets[maxClues]);
        }

        private static int CalculateMaxClues(Mobile from)
        {
            int itemIDSkill = from.Skills[SkillName.ItemID].Fixed / 10; // 0 to 1000 -> 0 to 100
            return Math.Max(3, Math.Min(10, 200 / itemIDSkill));
        }

        private static void GetRandomLocations(int count, List<Point3D> locations, List<Map> facets)
        {
            List<Point3D> possibleLocations = new List<Point3D>();
            List<Map> possibleFacets = new List<Map>();

            // Felucca locations
            possibleLocations.Add(new Point3D(1475, 1645, 20)); possibleFacets.Add(Map.Felucca); // Britain
            possibleLocations.Add(new Point3D(2701, 692, 5)); possibleFacets.Add(Map.Felucca);   // Trinsic
			possibleLocations.Add(new Point3D(1527, 1396, 20)); possibleFacets.Add(Map.Felucca);  // Skara Brae
            possibleLocations.Add(new Point3D(1486, 1473, 80)); possibleFacets.Add(Map.Felucca);  // Jhelom		
			possibleLocations.Add(new Point3D(1553, 1426, 20)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1475, 1513, 20)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1612, 1515, 40)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1633, 1511, 35)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1618, 1564, 50)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1650, 1545, 1)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1666, 1547, 30)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1694, 1546, 65)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1708, 1562, 50)); possibleFacets.Add(Map.Felucca);
			possibleLocations.Add(new Point3D(1675, 1570, 20)); possibleFacets.Add(Map.Felucca);
        }

        private static string GetRandomCommodity()
        {
            string[] commodities = new string[]
            {
                "Iron Ingot", "Log", "Raw Ribs", "Fish Steak", "Wool", "Cotton",
                "Leather", "Board", "Arrow", "Bottle", "Gems"
            };
            return commodities[Utility.Random(commodities.Length)];
        }

        private static int CalculateRequiredAmount(int level)
        {
            return 100 + (level * 50); // Adjust this formula as needed
        }
    }

    public class TradeRouteGump : Gump
    {
        private readonly Mobile m_From;

        public TradeRouteGump(Mobile from) : base(50, 50)
        {
            m_From = from;

            AddPage(0);
            AddBackground(0, 0, 200, 200, 5054);
            AddLabel(20, 20, 0, "Trade Route System");
            AddButton(20, 50, 4005, 4007, 1, GumpButtonType.Reply, 0);
            AddLabel(55, 50, 0, "Start Trade Route");
        }

        public override void OnResponse(NetState sender, RelayInfo info)
        {
            if (info.ButtonID == 1)
            {
                TradeRouteSystem.StartTradeRoute(m_From);
            }
        }
    }
}