Can you help me convert this ServUO XML NPC into a C# script?  Below is a XML spawner definition that makes how he looks, and below that is the dialogue he says when he hears a player say the indicated phrases.  Below that is an example of an NPC I converted earlier:

I am using an older version of C# so keep this in mind: Always use features compatible with C# 2.0/3.0. 
Avoid newer C# constructs like interpolated strings, LINQ, var, and async/await.

Be sure to include the standard hair information for each NPC, its added auromatically with the XML spawner.  Like this for a female:

			Hue = Race.RandomSkinHue();
			HairItemID = Race.RandomHair(Female);
			HairHue = Race.RandomHairHue();
			
If the NPC gives a reward refer to the female example.  Be sure to include a 10 min timer so it can not be easily repeated.

NPC to Convert:

XMLQuestNPC,0/Str/90/Dex/70/Int/80/Hits/60/TalkText/*You see a brilliant and inventive engineer in a leather jacket*/Name/Alexander Graham Bell/UNEQUIP,Shoes,Delete/UNEQUIP,Pants,Delete/UNEQUIP,Shirt,Delete/UNEQUIP,Helm,Delete/UNEQUIP,Gloves,Delete/UNEQUIP,OuterTorso,Delete/UNEQUIP,MiddleTorso,Delete/EQUIP/<LongPants/Hue/1153>/EQUIP/<FancyShirt/Hue/1153>/EQUIP/<LeatherJacket/Hue/1153>/EQUIP/<Boots/Hue/1153>/EQUIP/<Glasses/Hue/1153>/EQUIP/<Dagger/name/Alexander's Invention>/Direction/South/ConfigFile/AlexanderGrahamBell/LoadConfig/True/


<?xml version="1.0" standalone="yes"?>
<XmlQuestNPC>
  <NPC>
    <Name>Alexander Graham Bell</Name>
    <Running>True</Running>
    <ProximityRange>3</ProximityRange>
    <ResetRange>16</ResetRange>
    <AllowGhost>False</AllowGhost>
    <SpeechPace>10</SpeechPace>
    <ResetTime>0.166666666666667</ResetTime>
    <ConfigFile>AlexanderGrahamBell</ConfigFile>
    <SpeechEntries>5</SpeechEntries>
  </NPC>
  <SpeechEntry>
    <EntryNumber>0</EntryNumber>
    <ID>0</ID>
    <Text>I'm Alexander Graham Bell, the genius from Canada. What do you want?</Text>
    <Keywords>name</Keywords>
    <DependsOn>-1</DependsOn>
    <Pause>1</Pause>
    <PrePause>-1</PrePause>
    <LockConversation>True</LockConversation>
    <IgnoreCarried>False</IgnoreCarried>
    <AllowNPCTrigger>False</AllowNPCTrigger>
    <SpeechStyle>Regular</SpeechStyle>
    <SpeechHue>-1</SpeechHue>
  </SpeechEntry>
  <SpeechEntry>
    <EntryNumber>10</EntryNumber>
    <ID>10</ID>
    <Text>As if I care about your health. I'm not your physician.</Text>
    <Keywords>health</Keywords>
    <DependsOn>-1</DependsOn>
    <Pause>1</Pause>
    <PrePause>-1</PrePause>
    <LockConversation>True</LockConversation>
    <IgnoreCarried>False</IgnoreCarried>
    <AllowNPCTrigger>False</AllowNPCTrigger>
    <SpeechStyle>Regular</SpeechStyle>
    <SpeechHue>-1</SpeechHue>
  </SpeechEntry>
  <SpeechEntry>
    <EntryNumber>20</EntryNumber>
    <ID>20</ID>
    <Text>Job? Do I look like I have a job? My job is listening to idiots like you.</Text>
    <Keywords>job</Keywords>
    <DependsOn>-1</DependsOn>
    <Pause>1</Pause>
    <PrePause>-1</PrePause>
    <LockConversation>True</LockConversation>
    <IgnoreCarried>False</IgnoreCarried>
    <AllowNPCTrigger>False</AllowNPCTrigger>
    <SpeechStyle>Regular</SpeechStyle>
    <SpeechHue>-1</SpeechHue>
  </SpeechEntry>
  <SpeechEntry>
    <EntryNumber>30</EntryNumber>
    <ID>30</ID>
    <Text>Do you even know the first thing about communication? Tell me, what's the most important invention in history?</Text>
    <Keywords>invention</Keywords>
    <DependsOn>-1</DependsOn>
    <Pause>1</Pause>
    <PrePause>-1</PrePause>
    <LockConversation>True</LockConversation>
    <IgnoreCarried>False</IgnoreCarried>
    <AllowNPCTrigger>False</AllowNPCTrigger>
    <SpeechStyle>Regular</SpeechStyle>
    <SpeechHue>-1</SpeechHue>
  </SpeechEntry>
  <SpeechEntry>
    <EntryNumber>40</EntryNumber>
    <ID>40</ID>
    <Text>Hah! You're even more ignorant than I thought. It's the telephone, you imbecile! Alexander Graham Bell's greatest creation.</Text>
    <Keywords>telephone</Keywords>
    <DependsOn>30</DependsOn>
    <Pause>1</Pause>
    <PrePause>-1</PrePause>
    <LockConversation>True</LockConversation>
    <IgnoreCarried>False</IgnoreCarried>
    <AllowNPCTrigger>False</AllowNPCTrigger>
    <SpeechStyle>Regular</SpeechStyle>
    <SpeechHue>-1</SpeechHue>
  </SpeechEntry>
</XmlQuestNPC>




Example NPC Male:

using System;
using Server;
using Server.Mobiles;
using Server.Items;
using Server.Gumps;

namespace Server.Mobiles
{
    [CorpseName("the corpse of Alexander Graham Bell")]
    public class AlexanderGrahamBell : BaseCreature
    {
        [Constructable]
        public AlexanderGrahamBell() : base(AIType.AI_Vendor, FightMode.None, 10, 1, 0.2, 0.4)
        {
            Name = "Alexander Graham Bell";
            Body = 0x190; // Human male body

            // Stats
            Str = 90;
            Dex = 70;
            Int = 80;
            Hits = 60;

            // Appearance
            AddItem(new LongPants() { Hue = 1153 });
            AddItem(new FancyShirt() { Hue = 1153 });
            AddItem(new Boots() { Hue = 1153 });
            AddItem(new Dagger { Name = "Alexander's Invention" });

			Hue = Race.RandomSkinHue();
			HairItemID = Race.RandomHair(this);
			HairHue = Race.RandomHairHue();
			FacialHairItemID = Race.RandomFacialHair(this);

            SpeechHue = 0; // Default speech hue
        }

        public override void OnSpeech(SpeechEventArgs e)
        {
            Mobile from = e.Mobile;

            if (!from.InRange(this, 3))
                return;

            if (Insensitive.Contains(e.Speech, "name"))
            {
                Say("I'm Alexander Graham Bell, the genius from Canada. What do you want?");
            }
            else if (Insensitive.Contains(e.Speech, "health"))
            {
                Say("As if I care about your health. I'm not your physician.");
            }
            else if (Insensitive.Contains(e.Speech, "job"))
            {
                Say("Job? Do I look like I have a job? My job is listening to idiots like you.");
            }
            else if (Insensitive.Contains(e.Speech, "invention"))
            {
                Say("Do you even know the first thing about communication? Tell me, what's the most important invention in history?");
            }
            else if (Insensitive.Contains(e.Speech, "telephone"))
            {
                Say("Hah! You're even more ignorant than I thought. It's the telephone, you imbecile! Alexander Graham Bell's greatest creation.");
            }

            base.OnSpeech(e);
        }

        public AlexanderGrahamBell(Serial serial) : base(serial) { }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}





Example NPC Female:

using System;
using Server;
using Server.Mobiles;
using Server.Items;

namespace Server.Mobiles
{
    [CorpseName("the corpse of Anne Boleyn")]
    public class AnneBoleyn : BaseCreature
    {
        private DateTime lastRewardTime;

        [Constructable]
        public AnneBoleyn() : base(AIType.AI_Vendor, FightMode.None, 10, 1, 0.2, 0.4)
        {
            Name = "Anne Boleyn";
            Body = 0x191; // Human female body

            // Stats
            Str = 85;
            Dex = 60;
            Int = 90;
            Hits = 65;

            // Appearance
            AddItem(new FancyDress() { Hue = 1156 }); // Clothing item with hue 1156
            AddItem(new GoldNecklace());
            AddItem(new Boots() { Hue = 1174 }); // Boots with hue 1174
            AddItem(new Spellbook() { Name = "Anne's Diary" });
			
			Hue = Race.RandomSkinHue();
			HairItemID = Race.RandomHair(Female);
			HairHue = Race.RandomHairHue();

            // Speech Hue
            SpeechHue = 0; // Default speech hue

            // Initialize the lastRewardTime to a past time
            lastRewardTime = DateTime.MinValue;
        }

        public override void OnSpeech(SpeechEventArgs e)
        {
            Mobile from = e.Mobile;

            if (!from.InRange(this, 3))
                return;

            string speech = e.Speech.ToLower();

            if (speech.Contains("name"))
            {
                Say("Greetings, traveler. I am Anne Boleyn.");
            }
            else if (speech.Contains("health"))
            {
                Say("I am in fine health, thank you.");
            }
            else if (speech.Contains("job"))
            {
                Say("My daily duty is to tend to the gardens of this fine estate.");
            }
            else if (speech.Contains("virtues humility"))
            {
                Say("The virtue of humility is a noble one. We should all strive to be humble and kind.");
            }
            else if (speech.Contains("virtues ponder"))
            {
                Say("Do you ponder the virtues, traveler?");
            }
            else if (speech.Contains("anne"))
            {
                Say("Aye, once a queen of England, my fate was sealed at the Tower of London. It's a tale of romance, ambition, and betrayal.");
            }
            else if (speech.Contains("fine"))
            {
                Say("Thankfully, the serenity of these gardens has kept my spirit in a state of tranquility. I find nature to be healing.");
            }
            else if (speech.Contains("gardens"))
            {
                Say("These gardens are home to many rare and mystical herbs. Some even say there's an ancient herb with powerful healing abilities hidden here.");
            }
            else if (speech.Contains("humility"))
            {
                Say("True humility is understanding our place in the vastness of the universe. It teaches us to be compassionate to others.");
            }
            else if (speech.Contains("ponder"))
            {
                TimeSpan cooldown = TimeSpan.FromMinutes(10);
                if (DateTime.UtcNow - lastRewardTime < cooldown)
                {
                    Say("I have no reward right now. Please return later.");
                }
                else
                {
                    Say("Deep reflection on virtues is essential for one's personal growth. In recognizing them, we shape our destiny. For your thoughtful inquiry, please accept this reward.");
                    from.AddToBackpack(new BeltSlotChangeDeed()); // Give the reward
                    lastRewardTime = DateTime.UtcNow; // Update the timestamp
                }
            }
            else if (speech.Contains("serenity"))
            {
                Say("Finding serenity amidst chaos is a virtue in itself. It's a sense of peace that eludes many, but can be found in nature's embrace.");
            }
            else if (speech.Contains("herbs"))
            {
                Say("These herbs carry the wisdom of ages. If you're keen to learn, seek the elder druid in the forest. He knows their secrets.");
            }

            base.OnSpeech(e);
        }

        public AnneBoleyn(Serial serial) : base(serial) { }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version
            writer.Write(lastRewardTime);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
            lastRewardTime = reader.ReadDateTime();
        }
    }
}

