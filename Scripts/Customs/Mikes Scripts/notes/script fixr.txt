Can you help me fix the bug in my ServUO script?  This is the error:

Errors:
 + Customs/Mikes Scripts/Dialogue/DialogueModule.cs:
    CS0246: Line 70: The type or namespace name 'NetState' could not be found (are you missing a using directive or an assembly reference?)
    CS0115: Line 70: 'DialogueGump.OnResponse(NetState, RelayInfo)': no suitable method found to override


This is the code causing the issues:
	
	public override void OnResponse(NetState sender, RelayInfo info)


			
This is the script:

using System;
using System.Collections.Generic;
using Server;
using Server.Gumps;
using Server.Items;
using Server.Mobiles;

public class DialogueModule
{
    public string NPCText { get; set; }
    public List<DialogueOption> Options { get; set; }

    public DialogueModule(string npcText)
    {
        NPCText = npcText;
        Options = new List<DialogueOption>();
    }

    public void AddOption(string text, Func<PlayerMobile, bool> condition, Action<PlayerMobile> action)
    {
        Options.Add(new DialogueOption(text, condition, action));
    }
}

public class DialogueOption
{
    public string Text { get; set; }
    public Func<PlayerMobile, bool> Condition { get; set; }
    public Action<PlayerMobile> Action { get; set; }

    public DialogueOption(string text, Func<PlayerMobile, bool> condition, Action<PlayerMobile> action)
    {
        Text = text;
        Condition = condition;
        Action = action;
    }
}

public class DialogueGump : Gump
{
    private DialogueModule _module;
    private PlayerMobile _player;

    public DialogueGump(PlayerMobile player, DialogueModule module) : base(100, 100)
    {
        _player = player;
        _module = module;

        Closable = true;
        Disposable = true;
        Dragable = true;
        Resizable = false;

        AddPage(0);
        AddBackground(0, 0, 400, 350, 9270);
        AddHtml(20, 20, 360, 100, _module.NPCText, false, true);

        int y = 130;
        for (int i = 0; i < _module.Options.Count; i++)
        {
            if (_module.Options[i].Condition(_player))
            {
                AddButton(20, y, 4005, 4007, i + 1, GumpButtonType.Reply, 0);
                AddHtml(55, y, 325, 40, _module.Options[i].Text, false, false);
                y += 40;
            }
        }
    }

	public override void OnResponse(NetState sender, RelayInfo info)
    {
        PlayerMobile player = sender.Mobile as PlayerMobile;

        if (player == null)
            return;

        int button = info.ButtonID - 1;

        if (button >= 0 && button < _module.Options.Count)
        {
            _module.Options[button].Action(player);
        }
    }
}

public class DialogueSystem
{
    public static void Initialize()
    {
        // Example usage
        DialogueModule greeting = new DialogueModule("Greetings, traveler! What brings you to our village?");
        
        greeting.AddOption("I'm looking for work.", 
            player => true, // Always available
            player => {
                player.SendGump(new DialogueGump(player, GetWorkModule()));
            });
        
        greeting.AddOption("I need healing.", 
            player => player.Hits < player.HitsMax, // Only available if player is injured
            player => {
                player.Heal(50);
                player.SendMessage("You feel refreshed!");
                player.CloseGump(typeof(DialogueGump));
            });
        
        greeting.AddOption("I want to learn about magic.", 
            player => player.Skills.Magery.Base >= 30.0, // Only if player has at least 30 Magery skill
            player => {
                player.SendGump(new DialogueGump(player, GetMagicModule()));
            });

        // Add more options as needed
    }

    private static DialogueModule GetWorkModule()
    {
        DialogueModule workModule = new DialogueModule("I have some tasks available. What kind of work are you interested in?");
        
        workModule.AddOption("I'm good at fighting. Any monsters need slaying?", 
            player => player.Skills.Swords.Base >= 30.0 || player.Skills.Macing.Base >= 30.0 || player.Skills.Fencing.Base >= 30.0,
            player => {
                player.SendGump(new DialogueGump(player, GetMonsterSlayingModule()));
            });
        
        workModule.AddOption("I'm a skilled crafter. Need any items made?", 
            player => player.Skills.Blacksmith.Base >= 30.0 || player.Skills.Tailoring.Base >= 30.0,
            player => {
                player.SendGump(new DialogueGump(player, GetCraftingModule()));
            });
        
        workModule.AddOption("I'm more of a gatherer. Any resources you need?", 
            player => player.Skills.Mining.Base >= 30.0 || player.Skills.Lumberjacking.Base >= 30.0,
            player => {
                player.SendMessage("Great! I need 20 iron ore or 20 logs. Bring them to me, and I'll reward you with 500 gold.");
                player.CloseGump(typeof(DialogueGump));
            });
        
        workModule.AddOption("On second thought, I'm not looking for work right now.", 
            player => true,
            player => {
                player.SendMessage("Alright then. Come back if you change your mind!");
                player.CloseGump(typeof(DialogueGump));
            });

        return workModule;
    }

    private static DialogueModule GetMagicModule()
    {
        DialogueModule magicModule = new DialogueModule("Ah, a fellow practitioner of the arcane arts! What would you like to know?");
        
        magicModule.AddOption("Can you teach me a new spell?", 
            player => player.Skills.Magery.Base >= 50.0,
            player => {
                player.SendMessage("I've taught you the Fireball spell. Use it wisely!");
                // Here you would actually add the spell to the player's spellbook
                player.CloseGump(typeof(DialogueGump));
            });
        
        magicModule.AddOption("I'm looking for rare magical reagents.", 
            player => player.Skills.Magery.Base >= 70.0 && player.Backpack.ConsumeTotal(typeof(Gold), 1000),
            player => {
                player.SendMessage("Here are some rare reagents for your advanced spells.");
                // Here you would actually add the reagents to the player's backpack
                player.CloseGump(typeof(DialogueGump));
            });
        
        magicModule.AddOption("Tell me about the history of magic in this land.", 
            player => true,
            player => {
                player.SendGump(new DialogueGump(player, GetMagicHistoryModule()));
            });
        
        magicModule.AddOption("Actually, I have to go. Thanks for the chat!", 
            player => true,
            player => {
                player.SendMessage("May the arcane forces be with you, traveler!");
                player.CloseGump(typeof(DialogueGump));
            });

        return magicModule;
    }

    private static DialogueModule GetMonsterSlayingModule()
    {
        DialogueModule slayingModule = new DialogueModule("Excellent! We have a dire wolf problem in the nearby forest. Can you help?");
        
        slayingModule.AddOption("Sure, I'll slay some dire wolves for you.", 
            player => true,
            player => {
                player.SendMessage("Great! Slay 10 dire wolves and return to me for your reward.");
                // Here you would set a quest flag or counter for the player
                player.CloseGump(typeof(DialogueGump));
            });
        
        slayingModule.AddOption("That sounds too dangerous. Got anything easier?", 
            player => true,
            player => {
                player.SendGump(new DialogueGump(player, GetWorkModule()));
            });

        return slayingModule;
    }

    private static DialogueModule GetCraftingModule()
    {
        DialogueModule craftingModule = new DialogueModule("We're in need of quality armor. Can you craft some for our guards?");
        
        craftingModule.AddOption("I can make some platemail armor.", 
            player => player.Skills.Blacksmith.Base >= 75.0,
            player => {
                player.SendMessage("Excellent! Craft 5 sets of platemail armor and bring them back for a handsome reward.");
                // Here you would set a quest flag or counter for the player
                player.CloseGump(typeof(DialogueGump));
            });
        
        craftingModule.AddOption("How about some leather armor instead?", 
            player => player.Skills.Tailoring.Base >= 65.0,
            player => {
                player.SendMessage("That works too! Make 10 sets of leather armor and return for your payment.");
                // Here you would set a quest flag or counter for the player
                player.CloseGump(typeof(DialogueGump));
            });
        
        craftingModule.AddOption("I don't think I can handle that right now.", 
            player => true,
            player => {
                player.SendGump(new DialogueGump(player, GetWorkModule()));
            });

        return craftingModule;
    }

    private static DialogueModule GetMagicHistoryModule()
    {
        DialogueModule historyModule = new DialogueModule("The history of magic in our land is long and fascinating. What period interests you most?");
        
        historyModule.AddOption("Tell me about the ancient wizards.", 
            player => true,
            player => {
                player.SendMessage("The ancient wizards were powerful beyond measure. They created the foundations of magic as we know it today.");
                player.CloseGump(typeof(DialogueGump));
            });
        
        historyModule.AddOption("I'd like to know about recent magical discoveries.", 
            player => true,
            player => {
                player.SendMessage("Recent discoveries have revolutionized our understanding of mana manipulation and spell efficiency.");
                player.CloseGump(typeof(DialogueGump));
            });
        
        historyModule.AddOption("Actually, I'm more interested in practical magic.", 
            player => true,
            player => {
                player.SendGump(new DialogueGump(player, GetMagicModule()));
            });

        return historyModule;
    }
}
