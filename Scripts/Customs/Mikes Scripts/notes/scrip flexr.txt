Can you help me fix the bug in my ServUO script?  This is the error:
 
Server Crash Report
===================

ServUO Version 0.5, Build 8988.31657
Operating System: Microsoft Windows NT 6.2.9200.0
.NET Framework: 4.0.30319.42000
Time: 21/08/2024 7:44:17 AM
Mobiles: 193950
Items: 854121
Exception:
System.NullReferenceException: Object reference not set to an instance of an object.
   at Server.Items.BaseClothing.AddNameProperties(ObjectPropertyList list)
   at Server.Item.GetProperties(ObjectPropertyList list)
   at Server.Item.get_PropertyList()
   at Server.Item.InvalidateProperties()
   at Server.Item.set_Map(Map value)
   at Server.Item.AddItem(Item item)
   at Server.Items.Corpse.AddItem(Item item)
   at Server.Items.Container.DropItem(Item dropped)
   at Server.Mobiles.UltimateMasterSwordsman.OnDeath(Container c)
   at Server.Mobile.Kill()
   at Server.Mobile.Damage(Int32 amount, Mobile from, Boolean informMount, Boolean checkDisrupt)
   at Server.Mobiles.BaseCreature.Damage(Int32 amount, Mobile from, Boolean informMount, Boolean checkDisrupt)
   at Server.AOS.Damage(IDamageable damageable, Mobile from, Int32 damage, Boolean ignoreArmor, Int32 phys, Int32 fire, Int32 cold, Int32 pois, Int32 nrgy, Int32 chaos, Int32 direct, Boolean keepAlive, DamageType type)
   at Server.Items.BaseWeapon.OnHit(Mobile attacker, IDamageable damageable, Double damageBonus)
   at Server.Items.BasePoleArm.OnHit(Mobile attacker, IDamageable defender, Double damageBonus)
   at Server.Items.BaseWeapon.OnSwing(Mobile attacker, IDamageable damageable, Double damageBonus)
   at Server.Mobile.CombatTimer.OnTick()
   at Server.Timer.Slice()
   at Server.Core.Main(String[] args)



This is the script:

using System;
using System.Collections;
using Server.Engines.CannedEvil;
using Server.Items;
using Server.Network;

namespace Server.Mobiles
{
    [CorpseName("corpse of Miyamoto Musashi")]
    public class UltimateMasterSwordsman : BaseChampion
    {
        private DateTime m_NextAbilityTime;

        [Constructable]
        public UltimateMasterSwordsman()
            : base(AIType.AI_Melee)
        {
            Name = "Miyamoto Musashi";
            Title = "The Sword Saint";
            Body = 0x190;
            Hue = 0x83F;

            SetStr(500, 700);
            SetDex(150, 200);
            SetInt(100, 150);

            SetHits(15000);
            SetMana(1000);

            SetDamage(40, 50);

            SetDamageType(ResistanceType.Physical, 100);

            SetResistance(ResistanceType.Physical, 70, 80);
            SetResistance(ResistanceType.Fire, 50, 60);
            SetResistance(ResistanceType.Cold, 50, 60);
            SetResistance(ResistanceType.Poison, 50, 60);
            SetResistance(ResistanceType.Energy, 50, 60);

            SetSkill(SkillName.Swords, 120.0);
            SetSkill(SkillName.Tactics, 120.0);
            SetSkill(SkillName.Parry, 120.0);
            SetSkill(SkillName.MagicResist, 120.0);

            Fame = 30000;
            Karma = -30000;

            VirtualArmor = 80;

            AddItem(new SamuraiHelm());
            AddItem(new PlateChest());
            AddItem(new PlateArms());
            AddItem(new PlateLegs());
            AddItem(new PlateGorget());
            AddItem(new PlateGloves());
            AddItem(new PlateSuneate());
            AddItem(new NoDachi());

            HairItemID = 0x203B; // Short Hair
            HairHue = 0x96;

            AddItem(new LongHair(Utility.RandomNeutralHue()));
        }

        public UltimateMasterSwordsman(Serial serial)
            : base(serial)
        {
        }

        public override ChampionSkullType SkullType { get { return ChampionSkullType.Power; } }

        public override Type[] UniqueList
        {
            get { return new Type[] { typeof(DualKatanas), typeof(SamuraiArmor) }; }
        }

        public override Type[] SharedList
        {
            get { return new Type[] { typeof(SamuraiSash), typeof(WarriorTome) }; }
        }

        public override Type[] DecorativeList
        {
            get { return new Type[] { typeof(SamuraiStatue), typeof(SwordDisplay) }; }
        }

        public override MonsterStatuetteType[] StatueTypes
        {
            get { return new MonsterStatuetteType[] { }; }
        }

        public override void GenerateLoot()
        {
            AddLoot(LootPack.UltraRich, 3);
            AddLoot(LootPack.FilthyRich);
            AddLoot(LootPack.Gems, 6);
        }

        public override void OnDeath(Container c)
        {
            base.OnDeath(c);

            c.DropItem(new PowerScroll(SkillName.Swords, 200.0));

            if (Utility.RandomDouble() < 0.6)
                c.DropItem(new DualKatanas());

            if (Utility.RandomDouble() < 0.6)
                c.DropItem(new SamuraiArmor());
        }

        public override void OnGaveMeleeAttack(Mobile defender)
        {
            base.OnGaveMeleeAttack(defender);

            if (DateTime.Now > m_NextAbilityTime)
            {
                switch (Utility.Random(3))
                {
                    case 0: DualStrike(defender); break;
                    case 1: FocusSlash(defender); break;
                    case 2: Parry(); break;
                }

                m_NextAbilityTime = DateTime.Now + TimeSpan.FromSeconds(Utility.RandomMinMax(20, 30));
            }
        }

        public void DualStrike(Mobile defender)
        {
            if (defender != null)
            {
                DoHarmful(defender);
                AOS.Damage(defender, this, Utility.RandomMinMax(40, 60), 100, 0, 0, 0, 0);
                AOS.Damage(defender, this, Utility.RandomMinMax(40, 60), 100, 0, 0, 0, 0);

                defender.FixedParticles(0x3779, 1, 20, 97, 0x3F, 0, EffectLayer.Waist);
                defender.PlaySound(0x3B9);
            }
        }

        public void FocusSlash(Mobile defender)
        {
            if (defender != null)
            {
                DoHarmful(defender);
                AOS.Damage(defender, this, Utility.RandomMinMax(70, 90), 100, 0, 0, 0, 0);

                defender.FixedParticles(0x36BD, 20, 10, 5044, EffectLayer.Head);
                defender.PlaySound(0x207);
            }
        }

        public void Parry()
        {
            if (Combatant != null)
            {
                this.VirtualArmorMod += 20;
                this.FixedParticles(0x376A, 9, 32, 5008, EffectLayer.Waist);
                this.PlaySound(0x1F5);
                Timer.DelayCall(TimeSpan.FromSeconds(10.0), new TimerCallback(RemoveParryEffect));
            }
        }

        private void RemoveParryEffect()
        {
            this.VirtualArmorMod -= 20;
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}

