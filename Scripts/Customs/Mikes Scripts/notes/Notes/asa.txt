using Server.Mobiles;
using Server.Items; // Required for handling items such as gold

namespace Server.Custom.SpecialVendor
{
    public class SpecialVendorMobile : BaseCreature
    {
        // Existing code...
		        [Constructable]
        public SpecialVendorMobile() : base(AIType.AI_Vendor, FightMode.None, 2, 1, 0.5, 2)
        {
            // Set the NPC's attributes here
			Hue = Utility.RandomSkinHue();          
            Body = 0x190;
            Name = "Item Gambler";            

            
            // Abilities and stats
            SetStr(300, 400);
            SetDex(70, 95);
            SetInt(170, 220);
            SetHits(260, 310);
            
            VirtualArmor = 30;
            
            SpeechHue = Utility.RandomDyedHue();
            SetDamage(10, 14);

            SetSkill(SkillName.MagicResist, 75.1, 95.0);
            SetSkill(SkillName.Tactics, 70.1, 95.0);
            SetSkill(SkillName.Magery, 80.0, 95.0);
        }

        public override void OnDoubleClick(Mobile from)
        {
            if (from.InRange(this.Location, 4))
            {
                if (HasEnoughGold(from, 500))
                {
                    DeductGold(from, 500);
                    from.SendGump(new SpecialVendorGump(from));
                }
                else
                {
                    this.Say("Thou art too broke to gamble with me!");
                }
            }
            else
            {
                from.SendMessage("You are too far away.");
            }
        }

        private bool HasEnoughGold(Mobile from, int amount)
        {
            // Check the player's bank and backpack for enough gold
            if (from.BankBox != null && from.BankBox.ConsumeTotal(typeof(Gold), amount, true))
                return true;

            return from.Backpack != null && from.Backpack.ConsumeTotal(typeof(Gold), amount);
        }

        private void DeductGold(Mobile from, int amount)
        {
            // Try to deduct from the backpack first
            if (from.Backpack != null && from.Backpack.ConsumeTotal(typeof(Gold), amount))
                return;

            // If not enough gold in backpack, we take from bank
            if (from.BankBox != null)
                from.BankBox.ConsumeTotal(typeof(Gold), amount);
        }

        // ... The rest of your existing code...
		public SpecialVendorMobile(Serial serial) : base(serial)
        {
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}
