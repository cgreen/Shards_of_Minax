I would like your help to make a cool new unique monster with special powers for my ServUO shard.  Could you make it with a dragon body and unique hue?  Make sure to display a message over the monsters head every time it uses an ability, for dramatic effect.  Please make this mosnter:

Blood Dragon
Slayer	Difficulty	GoldValue	Hits	MinDmg	MaxDmg	Wrestling	Armor	Resist
Beastial	99.4	900	5,000	40	50	100	50	25
Bleed	Passive	Has a 15% chance on melee attack to deal (DamageMax * 1.0) damage over 15 seconds
Massive Blood Breath	Cooldown	Fires projectiles in a cone, inflicting (DamageMax * 1.0) bleed damage over for 15 seconds against up to 3 targets (the first target hit also takes +50% damage)

This is a dragon with cone attack for reference:

using System;
using Server;
using Server.Items;
using Server.Mobiles;
using Server.Spells;
using System.Collections.Generic;

namespace Server.Mobiles
{
    public class MegaDragon : BaseCreature
    {
        private DateTime m_NextBreathTime;
		[Constructable]
        public MegaDragon() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4)
        {
            Name = "MegaDragon";
            Body = 49; // Adjust to appropriate dragon model
            BaseSoundID = 362;

            SetStr(1096, 1185);
            SetDex(86, 175);
            SetInt(686, 775);

            SetHits(658, 711);

            SetDamage(29, 35);
			
			m_NextBreathTime = DateTime.UtcNow; // Initialize the cooldown

            // Adjust skills, stats, and resistances as needed
        }

        public override void OnThink()
        {
            base.OnThink();

            // Example trigger for the special attack, adjust as needed
            if (Combatant != null && DateTime.UtcNow >= m_NextBreathTime)
            {
                BreathSpecialAttack();
				m_NextBreathTime = DateTime.UtcNow + TimeSpan.FromSeconds(5);
            }
        }

        public void BreathSpecialAttack()
		{
			Map map = this.Map;

			if (map == null)
				return;

			Direction d = this.Direction;
			int range = 10; // Range of the attack in tiles
			int damage = 30; // Damage for the breath attack
			List<Point3D> targets = new List<Point3D>();

			// Calculate offsets based on the dragon's direction
			int dx = 0, dy = 0;
			switch (d & Direction.Mask)
			{
				case Direction.North:
					dy = -1;
					break;
				case Direction.East:
					dx = 1;
					break;
				case Direction.South:
					dy = 1;
					break;
				case Direction.West:
					dx = -1;
					break;
				// Include cases for other directions if needed (e.g., down, left, up, right)
				case Direction.Right: // North-East
					dx = 1;
					dy = -1;
					break;
				case Direction.Down: // South-East
					dx = 1;
					dy = 1;
					break;
				case Direction.Left: // South-West
					dx = -1;
					dy = 1;
					break;
				case Direction.Up: // North-West
					dx = -1;
					dy = -1;
					break;
			}

			for (int i = 1; i <= range; i++)
			{
				int perpendicularRange = i;
				int baseX = this.X + i * dx;
				int baseY = this.Y + i * dy;

				for (int j = -perpendicularRange; j <= perpendicularRange; j++)
				{
					int targetX = baseX;
					int targetY = baseY;

					if (Math.Abs(dx) != Math.Abs(dy))
					{
						// Handling cardinal directions (North, East, South, West)
						if (dx == 0)
						{
							targetX += j;
						}
						else if (dy == 0)
						{
							targetY += j;
						}
					}
					else
					{
						// Handling intercardinal directions (NE, SE, SW, NW)
						if (dx * dy > 0) // Moving in SE or NW direction
						{
							targetX += j;
							targetY -= j; // Invert the increment for one axis to spread perpendicularly
						}
						else // Moving in NE or SW direction
						{
							targetX += j;
							targetY += j; // Both axes increment in the same direction for NE and SW
						}
					}

					if (map.CanFit(targetX, targetY, this.Z, 16, false, false))
						targets.Add(new Point3D(targetX, targetY, this.Z));
					else
					{
						int targetZ = map.GetAverageZ(targetX, targetY);
						if (map.CanFit(targetX, targetY, targetZ, 16, false, false))
							targets.Add(new Point3D(targetX, targetY, targetZ));
					}
				}
			}

			foreach (Point3D p in targets)
			{
				int flameHue = 2543; // Set this to the hue value you want for the flamestrike effect.
				Effects.SendLocationEffect(p, map, 0x36BD, 16, 10, flameHue, 0); // Flamestrike animation
				IPooledEnumerable eable = map.GetMobilesInRange(p, 0); // Only target mobiles in the same tile
				foreach (Mobile m in eable)
				{
					if (m is PlayerMobile || m is BaseCreature)
					{
						// We can check if the mobile is a friend or foe before applying damage
						// This example will damage all mobiles, but you could check for allegiances or factions as needed
						m.Damage(damage, this);
					}
				}
				eable.Free(); // Always free the enumerable when done to avoid memory leaks
			}
		}


        public MegaDragon(Serial serial) : base(serial)
        {
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}







Here are examples of two unique monsters that I made earlier:

using System;
using Server.Items;
using Server.Network;

namespace Server.Mobiles
{
    [CorpseName("a shimmerling corpse")]
    public class Shimmerling : BaseCreature
    {
        private static readonly string[] m_Vocabulary = new string[]
        {
            "twinkle",
            "shimmer shimmer",
            "sparkle sparkle!"
        };

        private bool m_CanTalk;
        private DateTime m_NextShimmerEffect;
        private DateTime m_NextMirageClone;

        [Constructable]
        public Shimmerling()
            : base(AIType.AI_Animal, FightMode.Aggressor, 10, 1, 0.2, 0.4)
        {
            Name = "a shimmerling";
            Body = 0x117; // Using ferret body as base
            Hue = 1153; // Iridescent hue

            this.SetStr(200);
            this.SetDex(110);
            this.SetInt(150);

            this.SetDamage(14, 21);

            this.SetDamageType(ResistanceType.Physical, 0);
            this.SetDamageType(ResistanceType.Poison, 100);

            this.SetResistance(ResistanceType.Physical, 45, 55);
            this.SetResistance(ResistanceType.Fire, 50, 60);
            this.SetResistance(ResistanceType.Cold, 20, 30);
            this.SetResistance(ResistanceType.Poison, 70, 80);
            this.SetResistance(ResistanceType.Energy, 40, 50);

            this.SetSkill(SkillName.EvalInt, 90.1, 100.0);
            this.SetSkill(SkillName.Meditation, 90.1, 100.0);
            this.SetSkill(SkillName.Magery, 90.1, 100.0);
            this.SetSkill(SkillName.MagicResist, 90.1, 100.0);
            this.SetSkill(SkillName.Tactics, 100.0);
            this.SetSkill(SkillName.Wrestling, 98.1, 99.0);

            this.VirtualArmor = 58;

            Tamable = true;
            ControlSlots = 1;
            MinTameSkill = -18.9;

            m_CanTalk = true;
            m_NextShimmerEffect = DateTime.UtcNow;
            m_NextMirageClone = DateTime.UtcNow;
        }

        public Shimmerling(Serial serial)
            : base(serial)
        {
        }

        public override int Meat { get { return 1; } }
        public override FoodType FavoriteFood { get { return FoodType.Fish | FoodType.FruitsAndVegies; } }

        public override void OnMovement(Mobile m, Point3D oldLocation)
        {
            base.OnMovement(m, oldLocation);

            if (m is Shimmerling && m.InRange(this, 3) && m.Alive)
                Talk((Shimmerling)m);
        }

        public void Talk()
        {
            Talk(null);
        }

        public void Talk(Shimmerling to)
        {
            if (m_CanTalk)
            {
                Say(m_Vocabulary[Utility.Random(m_Vocabulary.Length)]);

                if (to != null && Utility.RandomBool())
                    Timer.DelayCall(TimeSpan.FromSeconds(Utility.RandomMinMax(5, 8)), new TimerCallback(delegate() { to.Talk(); }));

                m_CanTalk = false;

                Timer.DelayCall(TimeSpan.FromSeconds(Utility.RandomMinMax(20, 30)), new TimerCallback(delegate() { m_CanTalk = true; }));
            }
        }

        public override void OnThink()
        {
            base.OnThink();

            if (Combatant != null)
            {
                if (DateTime.UtcNow >= m_NextShimmerEffect)
                {
                    ShimmerEffect();
                }

                if (DateTime.UtcNow >= m_NextMirageClone)
                {
                    CreateMirageClone();
                }
            }
        }

        private void ShimmerEffect()
        {
            PublicOverheadMessage(MessageType.Regular, 0x3B2, true, "* Shimmers brightly *");
            FixedEffect(0x376A, 10, 16);

            foreach (Mobile m in GetMobilesInRange(5))
            {
                if (m != this && m.Player)
                {
                    m.SendMessage("The Shimmerling's bright light dazzles you!");
                    m.Freeze(TimeSpan.FromSeconds(2));
                }
            }

            m_NextShimmerEffect = DateTime.UtcNow + TimeSpan.FromSeconds(30);
        }

        private void CreateMirageClone()
        {
            Point3D loc = GetSpawnPosition(2);

            if (loc != Point3D.Zero)
            {
                Effects.SendLocationParticles(EffectItem.Create(loc, Map, EffectItem.DefaultDuration), 0x3728, 10, 10, 2023);

                MirageClone clone = new MirageClone(this);
                clone.MoveToWorld(loc, Map);

                Timer.DelayCall(TimeSpan.FromSeconds(30), new TimerCallback(delegate() 
                {
                    if (!clone.Deleted)
                        clone.Delete(); 
                }));

                m_NextMirageClone = DateTime.UtcNow + TimeSpan.FromMinutes(2);
            }
        }

        private Point3D GetSpawnPosition(int range)
        {
            for (int i = 0; i < 10; i++)
            {
                int x = X + Utility.RandomMinMax(-range, range);
                int y = Y + Utility.RandomMinMax(-range, range);
                int z = Map.GetAverageZ(x, y);

                Point3D p = new Point3D(x, y, z);

                if (Map.CanSpawnMobile(p))
                    return p;
            }

            return Point3D.Zero;
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();

            m_CanTalk = true;
            m_NextShimmerEffect = DateTime.UtcNow;
            m_NextMirageClone = DateTime.UtcNow;
        }
    }

    public class MirageClone : BaseCreature
    {
        private Mobile m_Master;

        public MirageClone(Mobile master)
            : base(AIType.AI_Melee, FightMode.None, 10, 1, 0.2, 0.4)
        {
            m_Master = master;

            Body = master.Body;
            Hue = master.Hue;
            Name = master.Name;

            SetStr(1);
            SetDex(1);
            SetInt(1);

            SetHits(1);

            SetDamage(0);

            SetResistance(ResistanceType.Physical, 100);
            SetResistance(ResistanceType.Fire, 100);
            SetResistance(ResistanceType.Cold, 100);
            SetResistance(ResistanceType.Poison, 100);
            SetResistance(ResistanceType.Energy, 100);

            VirtualArmor = 100;
        }

        public MirageClone(Serial serial)
            : base(serial)
        {
        }

        public override bool DeleteCorpseOnDeath { get { return true; } }

        public override void OnThink()
        {
            if (m_Master == null || m_Master.Deleted)
            {
                Delete();
                return;
            }

            if (Combatant == null)
                Combatant = m_Master.Combatant;
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
            writer.Write(m_Master);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
            m_Master = reader.ReadMobile();
        }
    }
}






using System;
using Server.Items;
using Server.Network;

namespace Server.Mobiles
{
    [CorpseName("a blood ape corpse")]
    public class BloodApe : BaseCreature
    {
        private DateTime m_NextHealthDrain;
        private DateTime m_NextBloodFrenzy;
        private DateTime m_BloodFrenzyEnd;

        [Constructable]
        public BloodApe()
            : base(AIType.AI_Melee, FightMode.Closest, 10, 1, 0.2, 0.4)
        {
            Name = "a blood ape";
            Body = 0x1D;
            BaseSoundID = 0x9E;
            Hue = 1157; // Red hue

            this.SetStr(200);
            this.SetDex(110);
            this.SetInt(150);

            this.SetDamage(14, 21);

            this.SetDamageType(ResistanceType.Physical, 0);
            this.SetDamageType(ResistanceType.Poison, 100);

            this.SetResistance(ResistanceType.Physical, 45, 55);
            this.SetResistance(ResistanceType.Fire, 50, 60);
            this.SetResistance(ResistanceType.Cold, 20, 30);
            this.SetResistance(ResistanceType.Poison, 70, 80);
            this.SetResistance(ResistanceType.Energy, 40, 50);

            this.SetSkill(SkillName.EvalInt, 90.1, 100.0);
            this.SetSkill(SkillName.Meditation, 90.1, 100.0);
            this.SetSkill(SkillName.Magery, 90.1, 100.0);
            this.SetSkill(SkillName.MagicResist, 90.1, 100.0);
            this.SetSkill(SkillName.Tactics, 100.0);
            this.SetSkill(SkillName.Wrestling, 98.1, 99.0);

            this.VirtualArmor = 58;

            Tamable = true;
            ControlSlots = 1;
            MinTameSkill = -18.9;

            m_NextHealthDrain = DateTime.UtcNow;
            m_NextBloodFrenzy = DateTime.UtcNow;
        }

        public BloodApe(Serial serial)
            : base(serial)
        {
        }

        public override int Meat { get { return 1; } }
        public override int Hides { get { return 6; } }
        public override FoodType FavoriteFood { get { return FoodType.Meat; } }

        public override void OnThink()
        {
            base.OnThink();

            if (Combatant != null)
            {
                if (DateTime.UtcNow >= m_NextHealthDrain)
                {
                    DrainHealth();
                }

                if (DateTime.UtcNow >= m_NextBloodFrenzy && DateTime.UtcNow >= m_BloodFrenzyEnd)
                {
                    ActivateBloodFrenzy();
                }
            }

            if (DateTime.UtcNow >= m_BloodFrenzyEnd && m_BloodFrenzyEnd != DateTime.MinValue)
            {
                DeactivateBloodFrenzy();
            }
        }

        private void DrainHealth()
        {
            Mobile target = Combatant as Mobile;
            if (target != null && target.Alive)
            {
                int damage = Utility.RandomMinMax(5, 10);
                target.Damage(damage, this);
                Hits = Math.Min(Hits + damage, HitsMax);
                target.PlaySound(0x1F1);
                target.FixedEffect(0x376A, 10, 16);
                m_NextHealthDrain = DateTime.UtcNow + TimeSpan.FromSeconds(10);
            }
        }

        private void ActivateBloodFrenzy()
        {
            PublicOverheadMessage(MessageType.Regular, 0x3B2, true, "* Blood Frenzy! *");
            PlaySound(0x165);
            FixedEffect(0x37C4, 10, 36);

            SetStr(Str + 30);
            SetDex(Dex + 20);
            SetInt(Int + 10);

            m_BloodFrenzyEnd = DateTime.UtcNow + TimeSpan.FromSeconds(30);
            m_NextBloodFrenzy = DateTime.UtcNow + TimeSpan.FromMinutes(2);
        }

        private void DeactivateBloodFrenzy()
        {
            SetStr(Str - 30);
            SetDex(Dex - 20);
            SetInt(Int - 10);

            m_BloodFrenzyEnd = DateTime.MinValue;
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();

            m_NextHealthDrain = DateTime.UtcNow;
            m_NextBloodFrenzy = DateTime.UtcNow;
            m_BloodFrenzyEnd = DateTime.MinValue;
        }
    }
}