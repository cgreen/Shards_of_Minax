I would like your help to make a cool new unique monster with special powers for my ServUO shard.  Could you make it with a Harpy body and unique hue?  Make sure to display a message over the monsters head every time it uses an ability, for dramatic effect.  Please make this mosnter:

Aries Harpy
- Appearance: Fiery red feathers.
- Special Abilities:
  - Ram Charge: Charges at the player, dealing high impact damage and knocking them back.
  - Fire Burst: Emits a burst of fire dealing area-of-effect fire damage.
- Effects: Visual flames around the Harpy when it uses abilities, fiery sound effects.

This is the Harpy for reference:

using System;

namespace Server.Mobiles
{
    [CorpseName("a harpy corpse")]
    public class Harpy : BaseCreature
    {
        [Constructable]
        public Harpy()
            : base(AIType.AI_Melee, FightMode.Closest, 10, 1, 0.2, 0.4)
        {
            this.Name = "a harpy";
            this.Body = 30;
            this.BaseSoundID = 402;

            this.SetStr(96, 120);
            this.SetDex(86, 110);
            this.SetInt(51, 75);

            this.SetHits(58, 72);

            this.SetDamage(5, 7);

            this.SetDamageType(ResistanceType.Physical, 100);

            this.SetResistance(ResistanceType.Physical, 25, 30);
            this.SetResistance(ResistanceType.Fire, 10, 20);
            this.SetResistance(ResistanceType.Cold, 10, 30);
            this.SetResistance(ResistanceType.Poison, 20, 30);
            this.SetResistance(ResistanceType.Energy, 10, 20);

            this.SetSkill(SkillName.MagicResist, 50.1, 65.0);
            this.SetSkill(SkillName.Tactics, 70.1, 100.0);
            this.SetSkill(SkillName.Wrestling, 60.1, 90.0);

            this.Fame = 2500;
            this.Karma = -2500;

            this.VirtualArmor = 28;
        }

        public Harpy(Serial serial)
            : base(serial)
        {
        }

        public override bool CanRummageCorpses
        {
            get
            {
                return true;
            }
        }
        public override int Meat
        {
            get
            {
                return 4;
            }
        }
        public override MeatType MeatType
        {
            get
            {
                return MeatType.Bird;
            }
        }
        public override int Feathers
        {
            get
            {
                return 50;
            }
        }
        public override bool CanFly
        {
            get
            {
                return true;
            }
        }
        public override void GenerateLoot()
        {
            this.AddLoot(LootPack.Meager, 2);
        }

        public override int GetAttackSound()
        {
            return 916;
        }

        public override int GetAngerSound()
        {
            return 916;
        }

        public override int GetDeathSound()
        {
            return 917;
        }

        public override int GetHurtSound()
        {
            return 919;
        }

        public override int GetIdleSound()
        {
            return 918;
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}











Here are examples of two unique monsters that I made earlier:

using System;
using Server.Items;
using Server.Network;

namespace Server.Mobiles
{
    [CorpseName("a shimmerling corpse")]
    public class Shimmerling : BaseCreature
    {
        private static readonly string[] m_Vocabulary = new string[]
        {
            "twinkle",
            "shimmer shimmer",
            "sparkle sparkle!"
        };

        private bool m_CanTalk;
        private DateTime m_NextShimmerEffect;
        private DateTime m_NextMirageClone;

        [Constructable]
        public Shimmerling()
            : base(AIType.AI_Animal, FightMode.Aggressor, 10, 1, 0.2, 0.4)
        {
            Name = "a shimmerling";
            Body = 0x117; // Using ferret body as base
            Hue = 1153; // Iridescent hue

            this.SetStr(200);
            this.SetDex(110);
            this.SetInt(150);

            this.SetDamage(14, 21);

            this.SetDamageType(ResistanceType.Physical, 0);
            this.SetDamageType(ResistanceType.Poison, 100);

            this.SetResistance(ResistanceType.Physical, 45, 55);
            this.SetResistance(ResistanceType.Fire, 50, 60);
            this.SetResistance(ResistanceType.Cold, 20, 30);
            this.SetResistance(ResistanceType.Poison, 70, 80);
            this.SetResistance(ResistanceType.Energy, 40, 50);

            this.SetSkill(SkillName.EvalInt, 90.1, 100.0);
            this.SetSkill(SkillName.Meditation, 90.1, 100.0);
            this.SetSkill(SkillName.Magery, 90.1, 100.0);
            this.SetSkill(SkillName.MagicResist, 90.1, 100.0);
            this.SetSkill(SkillName.Tactics, 100.0);
            this.SetSkill(SkillName.Wrestling, 98.1, 99.0);

            this.VirtualArmor = 58;

            Tamable = true;
            ControlSlots = 1;
            MinTameSkill = -18.9;

            m_CanTalk = true;
            m_NextShimmerEffect = DateTime.UtcNow;
            m_NextMirageClone = DateTime.UtcNow;
        }

        public Shimmerling(Serial serial)
            : base(serial)
        {
        }

        public override int Meat { get { return 1; } }
        public override FoodType FavoriteFood { get { return FoodType.Fish | FoodType.FruitsAndVegies; } }

        public override void OnMovement(Mobile m, Point3D oldLocation)
        {
            base.OnMovement(m, oldLocation);

            if (m is Shimmerling && m.InRange(this, 3) && m.Alive)
                Talk((Shimmerling)m);
        }

        public void Talk()
        {
            Talk(null);
        }

        public void Talk(Shimmerling to)
        {
            if (m_CanTalk)
            {
                Say(m_Vocabulary[Utility.Random(m_Vocabulary.Length)]);

                if (to != null && Utility.RandomBool())
                    Timer.DelayCall(TimeSpan.FromSeconds(Utility.RandomMinMax(5, 8)), new TimerCallback(delegate() { to.Talk(); }));

                m_CanTalk = false;

                Timer.DelayCall(TimeSpan.FromSeconds(Utility.RandomMinMax(20, 30)), new TimerCallback(delegate() { m_CanTalk = true; }));
            }
        }

        public override void OnThink()
        {
            base.OnThink();

            if (Combatant != null)
            {
                if (DateTime.UtcNow >= m_NextShimmerEffect)
                {
                    ShimmerEffect();
                }

                if (DateTime.UtcNow >= m_NextMirageClone)
                {
                    CreateMirageClone();
                }
            }
        }

        private void ShimmerEffect()
        {
            PublicOverheadMessage(MessageType.Regular, 0x3B2, true, "* Shimmers brightly *");
            FixedEffect(0x376A, 10, 16);

            foreach (Mobile m in GetMobilesInRange(5))
            {
                if (m != this && m.Player)
                {
                    m.SendMessage("The Shimmerling's bright light dazzles you!");
                    m.Freeze(TimeSpan.FromSeconds(2));
                }
            }

            m_NextShimmerEffect = DateTime.UtcNow + TimeSpan.FromSeconds(30);
        }

        private void CreateMirageClone()
        {
            Point3D loc = GetSpawnPosition(2);

            if (loc != Point3D.Zero)
            {
                Effects.SendLocationParticles(EffectItem.Create(loc, Map, EffectItem.DefaultDuration), 0x3728, 10, 10, 2023);

                MirageClone clone = new MirageClone(this);
                clone.MoveToWorld(loc, Map);

                Timer.DelayCall(TimeSpan.FromSeconds(30), new TimerCallback(delegate() 
                {
                    if (!clone.Deleted)
                        clone.Delete(); 
                }));

                m_NextMirageClone = DateTime.UtcNow + TimeSpan.FromMinutes(2);
            }
        }

        private Point3D GetSpawnPosition(int range)
        {
            for (int i = 0; i < 10; i++)
            {
                int x = X + Utility.RandomMinMax(-range, range);
                int y = Y + Utility.RandomMinMax(-range, range);
                int z = Map.GetAverageZ(x, y);

                Point3D p = new Point3D(x, y, z);

                if (Map.CanSpawnMobile(p))
                    return p;
            }

            return Point3D.Zero;
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();

            m_CanTalk = true;
            m_NextShimmerEffect = DateTime.UtcNow;
            m_NextMirageClone = DateTime.UtcNow;
        }
    }

    public class MirageClone : BaseCreature
    {
        private Mobile m_Master;

        public MirageClone(Mobile master)
            : base(AIType.AI_Melee, FightMode.None, 10, 1, 0.2, 0.4)
        {
            m_Master = master;

            Body = master.Body;
            Hue = master.Hue;
            Name = master.Name;

            SetStr(1);
            SetDex(1);
            SetInt(1);

            SetHits(1);

            SetDamage(0);

            SetResistance(ResistanceType.Physical, 100);
            SetResistance(ResistanceType.Fire, 100);
            SetResistance(ResistanceType.Cold, 100);
            SetResistance(ResistanceType.Poison, 100);
            SetResistance(ResistanceType.Energy, 100);

            VirtualArmor = 100;
        }

        public MirageClone(Serial serial)
            : base(serial)
        {
        }

        public override bool DeleteCorpseOnDeath { get { return true; } }

        public override void OnThink()
        {
            if (m_Master == null || m_Master.Deleted)
            {
                Delete();
                return;
            }

            if (Combatant == null)
                Combatant = m_Master.Combatant;
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
            writer.Write(m_Master);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
            m_Master = reader.ReadMobile();
        }
    }
}






using System;
using Server.Items;
using Server.Network;

namespace Server.Mobiles
{
    [CorpseName("a fire rooster corpse")]
    public class FireRooster : BaseCreature
    {
        private DateTime m_NextInfernoEgg;

        [Constructable]
        public FireRooster()
            : base(AIType.AI_Melee, FightMode.Closest, 10, 1, 0.2, 0.4)
        {
            Name = "a Fire Rooster";
            Body = 0xD0; // Chicken body
            BaseSoundID = 0x6E;
            Hue = 1161; // Fiery red hue

            SetStr(100);
            SetDex(120);
            SetInt(50);

            SetHits(80);
            SetMana(0);

            SetDamage(5, 10);

            SetDamageType(ResistanceType.Physical, 25);
            SetDamageType(ResistanceType.Fire, 75);

            SetResistance(ResistanceType.Physical, 20, 25);
            SetResistance(ResistanceType.Fire, 80, 90);
            SetResistance(ResistanceType.Cold, 5, 10);
            SetResistance(ResistanceType.Poison, 20, 30);
            SetResistance(ResistanceType.Energy, 10, 15);

            SetSkill(SkillName.MagicResist, 50.0, 65.0);
            SetSkill(SkillName.Tactics, 70.0, 85.0);
            SetSkill(SkillName.Wrestling, 70.0, 85.0);

            Fame = 1500;
            Karma = -1500;

            VirtualArmor = 30;

            Tamable = false;

            m_NextInfernoEgg = DateTime.UtcNow;
        }

        public FireRooster(Serial serial)
            : base(serial)
        {
        }

        public override int Meat { get { return 1; } }
        public override MeatType MeatType { get { return MeatType.Bird; } }
        public override FoodType FavoriteFood { get { return FoodType.GrainsAndHay; } }
        public override bool CanFly { get { return true; } }
        public override int Feathers { get { return 25; } }

        public override void GenerateLoot()
        {
            AddLoot(LootPack.Average);
        }

        public override void OnThink()
        {
            base.OnThink();

            if (Combatant != null)
            {
                if (DateTime.UtcNow >= m_NextInfernoEgg)
                {
                    LayInfernoEgg();
                }
            }
        }

        public override void OnGaveMeleeAttack(Mobile defender)
        {
            base.OnGaveMeleeAttack(defender);

            if (0.25 > Utility.RandomDouble()) // 25% chance
            {
                PublicOverheadMessage(MessageType.Regular, 0x3B2, true, "* Flaming Peck! *");
                defender.PlaySound(0x208);
                defender.FixedParticles(0x3709, 10, 30, 5052, EffectLayer.LeftFoot);

                int damage = Utility.RandomMinMax(3, 5);
                AOS.Damage(defender, this, damage, 0, 100, 0, 0, 0);
            }
        }

        private void LayInfernoEgg()
        {
            PublicOverheadMessage(MessageType.Regular, 0x3B2, true, "* Lays an Inferno Egg! *");
            PlaySound(0x665);

            InfernoEgg egg = new InfernoEgg(this);
            egg.MoveToWorld(Location, Map);

            m_NextInfernoEgg = DateTime.UtcNow + TimeSpan.FromSeconds(30);
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();

            m_NextInfernoEgg = DateTime.UtcNow;
        }
    }

    public class InfernoEgg : Item
    {
        private Mobile m_Owner;
        private DateTime m_ExplosionTime;

        public InfernoEgg(Mobile owner) : base(0x9B5)
        {
            m_Owner = owner;
            Movable = false;
            Hue = 1161; // Fiery red hue
            Name = "Inferno Egg";

            m_ExplosionTime = DateTime.UtcNow + TimeSpan.FromSeconds(5);

            Timer.DelayCall(TimeSpan.FromSeconds(5), new TimerCallback(Explode));
        }

        public InfernoEgg(Serial serial) : base(serial)
        {
        }

        public override void OnMovement(Mobile m, Point3D oldLocation)
        {
            if (m.InRange(this.GetWorldLocation(), 0))
            {
                Explode();
            }
        }

        public void Explode()
        {
            if (Deleted)
                return;

            PublicOverheadMessage(MessageType.Regular, 0x3B2, true, "* The egg explodes! *");

            Effects.PlaySound(GetWorldLocation(), Map, 0x307);

            Effects.SendLocationEffect(GetWorldLocation(), Map, 0x36BD, 20, 10);

            foreach (Mobile m in GetMobilesInRange(3))
            {
                if (m != m_Owner && m.Alive && !m.IsDeadBondedPet)
                {
                    int damage = Utility.RandomMinMax(10, 20);
                    AOS.Damage(m, m_Owner, damage, 0, 100, 0, 0, 0);

                    m.PlaySound(0x1DD);
                    m.FixedParticles(0x3709, 10, 30, 5052, EffectLayer.LeftFoot);
                }
            }

            this.Delete();
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int)0); // version

            writer.Write(m_Owner);
            writer.Write(m_ExplosionTime);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();

            m_Owner = reader.ReadMobile();
            m_ExplosionTime = reader.ReadDateTime();

            if (DateTime.UtcNow < m_ExplosionTime)
            {
                TimeSpan delay = m_ExplosionTime - DateTime.UtcNow;
                Timer.DelayCall(delay, new TimerCallback(Explode));
            }
            else
            {
                Timer.DelayCall(TimeSpan.Zero, new TimerCallback(Explode));
            }
        }
    }
}
